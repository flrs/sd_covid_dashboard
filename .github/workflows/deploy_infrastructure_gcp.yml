name: Deploy Infrastructure on GCP

on:
  workflow_dispatch:
  push:
    branches: main
    paths:
      - terraform/**

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  SECRETS_PASSPHRASE: ${{ secrets.SECRETS_KEY }}
  PROD_SECRETS_PASSPHRASE: ${{ secrets.PROD_SECRETS_KEY }}
  GKE_TF_KEY: ${{ secrets.GKE_TF_KEY }}
  GKE_CLUSTER: sd-covid-dashboard-cluster
  GKE_REGION: us-central1
  GKE_ZONE: us-central1-c
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  BADGE_GIST_ID: 78f880bf0781dd1ed6d5d676400d1ebe

jobs:
  deploy-infrastructure:
    name: Deploy infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Write environment to Terraform
        run: |-
          rm ./terraform/prod.auto.tfvars
          cat <<EOT >> ./terraform/prod.auto.tfvars
          project = "${PROJECT_ID}"
          region = "${GKE_REGION}"
          location = "${GKE_ZONE}"
          db_user = "${DB_USER}"
          db_password = "${DB_PASSWORD}"
          EOT

      - name: Extract Terraform secrets
        run: |-
          echo "${GKE_TF_KEY}" > ./terraform/keys.json

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.0
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform init
        id: init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform plan
        id: plan
        working-directory: ./terraform
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        id: terraform_apply
        working-directory: ./terraform
        run: terraform apply -auto-approve

      - name: Read terraform outputs
        working-directory: ./terraform
        run: |-
          export DB_HOST=$(terraform output db_host | tr -d \")
          echo "::add-mask::$DB_HOST"
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          export KUBEIP_SERVICE_ACCOUNT_ID=$(terraform output kubeip_service_account_id | tr -d \")
          echo $KUBEIP_SERVICE_ACCOUNT_ID > ../k8s/overlays/prod/kubeip/serviceaccount.txt
          echo "::add-mask::KUBEIP_SERVICE_ACCOUNT_ID"
          export EXTERNAL_IP=$(terraform output external_ip | tr -d \")
          echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV

      - uses: google-github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GKE_TF_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
          gcloud sql instances describe ${{ env.DB_HOST }} --format 'json(ipAddresses)' > tmp.json
          export DB_HOST=$(jq -r '.ipAddresses[] | select(.type | contains("PRIVATE")).ipAddress' tmp.json)
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV

      - name: Write postgres secrets
        run: |-
          cat <<EOT >> ./k8s/overlays/prod/postgres-secrets.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: postgres-credentials
            namespace: dashboard
          type: Opaque
          data:
            db_host: $(echo -n ${{ env.DB_HOST }} | base64)
            db_user: $(echo -n ${DB_USER} | base64)
            db_pass: $(echo -n ${DB_PASSWORD} | base64)
            db_name: cG9zdGdyZXMK

          EOT

      - name: Save secrets
        run: |-
          gpg --version
          echo ${{ secrets.PROD_SECRETS_KEY }} | gpg --batch --yes --output k8s/overlays/prod/postgres-secrets.yaml.enc --symmetric --passphrase-fd 0 --cipher-algo AES256 k8s/overlays/prod/postgres-secrets.yaml
          echo ${{ secrets.PROD_SECRETS_KEY }} | gpg --batch --yes --output k8s/overlays/prod/kubeip/serviceaccount.txt.enc --symmetric --passphrase-fd 0 --cipher-algo AES256 k8s/overlays/prod/kubeip/serviceaccount.txt

      - name: Update readme with external IP
        run: |
          sed -i.bu -r 's/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/${{ env.EXTERNAL_IP }}/g' ./README.md

      - name: Commit GCP deployment outputs
        continue-on-error: true
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s/overlays/prod/postgres-secrets.yaml.enc
          git add k8s/overlays/prod/kubeip/serviceaccount.txt.enc
          git add README.md
          git commit -m "Add terraform-generated GCP deployment outputs"

      - name: Get commit from environment
        run: |-
          export SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          echo "SHA_INFRASTRUCTURE=$SHORT_SHA" >> $GITHUB_ENV

      - name: Create infrastructure badge
        if: steps.terraform_apply.outcome == 'success'
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ env.BADGE_GIST_ID }}
          filename: sha_infrastructure.json
          label: GCP Infrastructure
          message: ${{ env.SHA_INFRASTRUCTURE }}
          namedLogo: Terraform
          color: '#623CE4'
          isError: ${{ steps.terraform_apply.outcome == 'failure' }}

      - name: Push changes
        continue-on-error: true
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
