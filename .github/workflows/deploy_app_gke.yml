name: Deploy App on GKE

on:
  workflow_run:
    workflows: [ "Build Docker Dashboard", "Build Docker Crawler" , "Deploy Infrastructure on GCP"]
    branches: [ main ]
    types:
      - completed

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  SECRETS_PASSPHRASE: ${{ secrets.SECRETS_KEY }}
  PROD_SECRETS_PASSPHRASE: ${{ secrets.PROD_SECRETS_KEY }}
  GKE_CLUSTER: sd-covid-dashboard-cluster
  GKE_ZONE: us-central1-c
  BADGE_GIST_ID: f1ee04065f445c0533bb92315cf24659

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    - run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Set up kubectl
      run: |-
        sudo apt-get update && sudo apt-get install -y apt-transport-https gnupg2
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
        echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
        sudo apt-get update
        sudo apt-get install -y kubectl

    - name: Decrypt secrets
      run: |-
        gpg --batch --yes --passphrase="$PROD_SECRETS_PASSPHRASE" --decrypt --output k8s/overlays/prod/postgres-secrets.yaml k8s/overlays/prod/postgres-secrets.yaml.enc
        
    - name: Set badge url
      run: |-
        echo "::set-env name=GIST_URL::'https://gist.githubusercontent.com/${{ github.actor }}/${{ env.BADGE_GIST_ID }}/raw/test.json'"
        
    - name: Read badge status
      run: |-
        echo "${{ env.GIST_URL }}"
        echo "::set-env name=SHA_DASHBOARD::${{ fromJSON(env.GIST_URL).sha_dashboard }}"
        echo "::set-env name=SHA_CRAWLER::${{ fromJSON(env.GIST_URL).sha_crawler }}"
        echo "::set-env name=SHA_APP::${{ fromJSON(env.GIST_URL).sha_app }}"

    - name: Update dashboard image
      if: ${{ github.event_name == 'workflow' && fromJSON(github.event_path).workflow.name == 'Build Docker Dashboard' }}
      id: deploy_dashboard
      run: |-
        export SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
        kubectl config current-context
        kubectl set image deployment/dashboard sd-covid-dashboard-dashboard=flrs/sd_covid_dashboard_dashboard:sha-$SHORT_SHA
        echo "::set-env name=SHA_DASHBOARD::$SHORT_SHA"

    - name: Update crawler image
      if: ${{ github.event_name == 'workflow' && fromJSON(github.event_path).workflow.name == 'Build Docker Crawler' }}
      id: deploy_crawler
      run: |-
        export SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
        kubectl config current-context
        kubectl set image cronjob/crawler-cronjob sd-covid-dashboard-crawler=flrs/sd_covid_dashboard_crawler:sha-$SHORT_SHA
        echo "::set-env name=SHA_CRAWLER::$SHORT_SHA"

    - name: Deploy whole app
      if: steps.deploy_dashboard.outcome == 'skipped' && steps.deploy_crawler.outcome == 'skipped'
      id: deploy_app
      run: |-
        kubectl config current-context
        kubectl apply -k k8s/overlays/prod
        export SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
        echo "::set-env name=SHA_APP::$SHORT_SHA"

    - name: Start initial crawler job
      if: steps.deploy_app.outcome == 'success'
      run: |-
        if kubectl get jobs --ignore-not-found | grep -q 'crawler-database-seeding'; then
           kubectl create job --from=cronjob/crawler-cronjob crawler-database-seeding
        else
          exit 0
        fi

    - name: Create Badges
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ env.BADGE_GIST_ID }}
        filename: test.json
        sha_dashboard: ${{ env.SHA_DASHBOARD }}
        sha_crawler: ${{ env.SHA_CRAWLER }}
        sha_app: ${{ env.SHA_APP }}
