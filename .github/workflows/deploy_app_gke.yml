name: Deploy App on GKE

on:
  workflow_dispatch:
  workflow_run:
    workflows: [ "Build Docker Dashboard", "Build Docker Crawler" , "Deploy Infrastructure on GCP"]
    branches: [ main ]
    types:
      - completed
  push:
    branches: main
    paths:
      - k8s/**

env:
  SECRETS_PASSPHRASE: ${{ secrets.SECRETS_KEY }}
  PROD_SECRETS_PASSPHRASE: ${{ secrets.PROD_SECRETS_KEY }}
  GKE_CLUSTER: sd-covid-dashboard-cluster
  GKE_ZONE: us-central1-c
  BADGE_GIST_ID: 78f880bf0781dd1ed6d5d676400d1ebe

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    - run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Set up kubectl
      run: |-
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.16.6/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        kubectl version --client
        
    - name: Set env vars
      run: |-
        if grep -Fq "Build Docker Dashboard" ${{ github.event_path }}
        then
          export WORKFLOW="Build Docker Dashboard"
        elif grep -Fq 'Build Docker Crawler' ${{ github.event_path }}
        then
          export WORKFLOW="Build Docker Crawler"
        else
          export WORKFLOW="App"
        fi
        echo "::set-env name=WORKFLOW::$WORKFLOW"

    - name: Decrypt secrets
      run: |-
        gpg --batch --yes --passphrase="$PROD_SECRETS_PASSPHRASE" --decrypt --output k8s/overlays/prod/postgres-secrets.yaml k8s/overlays/prod/postgres-secrets.yaml.enc
        gpg --batch --yes --passphrase="$PROD_SECRETS_PASSPHRASE" --decrypt --output k8s/overlays/prod/kubeip/serviceaccount.txt k8s/overlays/prod/kubeip/serviceaccount.txt.enc

    - name: Update dashboard image
      if: ${{ env.WORKFLOW == 'Build Docker Dashboard'}}
      id: deploy_dashboard
      continue-on-error: true
      run: |-
        export SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
        echo $SHORT_SHA
        kubectl config current-context
        kubectl set image deployment/dashboard sd-covid-dashboard-dashboard=flrs/sd_covid_dashboard_dashboard:sha-$SHORT_SHA --namespace=dashboard
        echo "::set-env name=SHA_DASHBOARD::$SHORT_SHA"

    - name: Create dashboard badge
      if: steps.deploy_dashboard.outcome != 'skipped'
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ env.BADGE_GIST_ID }}
        filename: sha_dashboard.json
        label: Dashboard
        message: ${{ env.SHA_DASHBOARD }}
        namedLogo: Kubernetes
        logoColor: '#FFFFFF'
        color: '#326CE5'
        isError: ${{ steps.deploy_dashboard.outcome == 'failure' }}

    - name: Update crawler image
      if: ${{ env.WORKFLOW == 'Build Docker Crawler'}}
      id: deploy_crawler
      continue-on-error: true
      run: |-
        export SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
        kubectl config current-context
        kubectl set image cronjob/crawler-cronjob sd-covid-dashboard-crawler=flrs/sd_covid_dashboard_crawler:sha-$SHORT_SHA --namespace=dashboard
        echo "::set-env name=SHA_CRAWLER::$SHORT_SHA"

    - name: Create crawler badge
      if: steps.deploy_crawler.outcome != 'skipped'
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ env.BADGE_GIST_ID }}
        filename: sha_crawler.json
        label: Crawler
        message: ${{ env.SHA_CRAWLER }}
        namedLogo: Kubernetes
        logoColor: '#FFFFFF'
        color: '#326CE5'
        isError: ${{ steps.deploy_crawler.outcome == 'failure' }}

    - name: Deploy whole app
      if: steps.deploy_dashboard.outcome == 'skipped' && steps.deploy_crawler.outcome == 'skipped'
      id: deploy_app
      continue-on-error: true
      run: |-
        kubectl config current-context
        export KUBE_IP_SERVICE_ACCOUNT=$(cat k8s/overlays/prod/kubeip/serviceaccount.txt)
        echo $KUBE_IP_SERVICE_ACCOUNT
        gcloud iam service-accounts keys create kubeip-key.json --iam-account $KUBE_IP_SERVICE_ACCOUNT --project ${{ secrets.GKE_PROJECT }}
        kubectl create secret generic kubeip-key --from-file=kubeip-key.json -n kube-system --dry-run -o yaml > k8s/overlays/prod/kubeip/secret.yaml
        kubectl apply -f https://raw.githubusercontent.com/hiddeco/cronjobber/master/deploy/crd.yaml
        kubectl apply -f https://raw.githubusercontent.com/hiddeco/cronjobber/master/deploy/rbac.yaml
        kubectl apply -f https://raw.githubusercontent.com/hiddeco/cronjobber/master/deploy/deploy.yaml
        kubectl apply -f https://raw.githubusercontent.com/hiddeco/cronjobber/master/deploy/deploy-updatetz.yaml
        kubectl apply -k k8s/overlays/prod
        export SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
        echo "::set-env name=SHA_APP::$SHORT_SHA"

    - name: Create Infrastructure Badge
      if: steps.deploy_app.outcome != 'skipped'
      uses: schneegans/dynamic-badges-action@v1.0.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ env.BADGE_GIST_ID }}
        filename: sha_app.json
        label: GKE Infrastructure
        message: ${{ env.SHA_APP }}
        namedLogo: Kubernetes
        logoColor: '#FFFFFF'
        color: '#326CE5'
        isError: ${{ steps.deploy_app.outcome == 'failure' }}
